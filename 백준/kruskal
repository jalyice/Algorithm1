import java.io.*;
import java.util.*;

public class Main {
    public static void union(int[] parent, int x, int y){
        x = find(parent, x);
        y = find(parent, y);

        if(x < y) parent[y] = x;
        else parent[x] = y;

    } 
    public static int find(int[] parent, int x){
        if(parent[x]==x) return x;
        else return find(parent, parent[x]);
    }

    public static void Kruskal(int[][] graph, int[] parent){
        int cost = 0;
        for(int i=0; i<graph.length;i++){
            if(find(parent, graph[i][0]) != find(parent, graph[i][1])){
                cost += graph[i][2];
                union(parent, graph[i][0], graph[i][1]);
            }
        }
        System.out.println(cost);
    }    
	public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        int n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());
        int[][] graph = new int[m][3];
        
        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            graph[i][0] = Integer.parseInt(st.nextToken());
            graph[i][1] = Integer.parseInt(st.nextToken());
            graph[i][2] = Integer.parseInt(st.nextToken());

        }
        
        Arrays.sort(graph, (o1,o2) -> o1[2]-o2[2]);
        
        int[] parent = new int[n+1];

        for(int i=0; i<parent.length;i++){
            parent[i]=i;
        }
        Kruskal(graph,parent);
   }
} 
